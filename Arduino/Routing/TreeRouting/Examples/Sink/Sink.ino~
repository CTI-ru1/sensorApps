//XBee Libraries
#include <XBee.h>
#include <XbeeRadio.h>
//Create the XbeeRadio object we'll be using
XBeeRadio xbee;
// create a reusable response object for responses we expect to handle
XBeeRadioResponse response;
//Reusable response
Rx16Response rx;

#include <TreeRouting.h>
TreeRouting * routing;
long previousMillis = 0;        // will store last time LED was updated
const int ledPin =  8;      // the number of the LED pin
int counter=0;

/**
 */
void radio_callback(char* topic, byte* payload, unsigned int length)
{

}


void setup()
{
  pinMode(13, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(8, OUTPUT);
  pinMode(7, OUTPUT);
  
//Connect to XBee
  xbee.initialize_xbee_module();
  xbee.begin(38400);
  //Initialize our XBee module with the correct values using channel 12
  xbee.init(12);

  routing= new TreeRouting(&xbee);
  routing->set_sink(true);
  
     uint16_t address = xbee.getMyAddress();
        uint8_t * bit = ((uint8_t*) & address);
        uint8_t mbyte = bit[1];
        uint8_t lbyte = bit[0];
        bit[0] = mbyte;
        bit[1] = lbyte;

	routing->set_my_address(address);
	
}


void loop()
{

  routing->loop();

    unsigned long currentMillis = millis();

    if(currentMillis - previousMillis > 5000) {
      previousMillis = currentMillis;   
      counter;
      routing->send(0x9a8,(byte*)&counter,1);
    }

  /*
  switch (routing->state()){
    case 0:
    case 1: 
      digitalWrite(13,HIGH);
      break;
    case 2: 
      digitalWrite(13,LOW);    
      break;
      }
      */
}
